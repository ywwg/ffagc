<div class="container">
  <h1><%= link_to "Firefly Art Grants", :controller => "home", :action => "index" %>: Create a Grant Type</h1>

  <% if admin_logged_in? %>
    <%= semantic_form_for @grant, :html => { :onsubmit => 'return validate();'} do |f| %>
    <fieldset>
        <%= f.input :name, :label => "Name of Grant", :required => true, :validate => true %>
        <%= f.input :max_funding_dollars, :label => "Max Funding ($)", :required => true, :validate => true, :input_html => { :onKeyUp => "numericFilter(this);" }  %>
        <li class="string input required stringish" id="grant_submit_start">
          <label class="label" for="grant_submit_start">Submissions Start Date<abbr title="required">*</abbr></label>
          <%= f.date_select :submit_start %>
        </li>
        <li class="string input required stringish" id="grant_submit_end">
          <label class="label" for="grant_submit_end">Submissions End Date<abbr title="required">*</abbr></label>
          <%= f.date_select :submit_end %>
        </li>
        <li class="string input required stringish" id="grant_vote_start">
          <label class="label" for="grant_vote_start">Voting Start Date<abbr title="required">*</abbr></label>
          <%= f.date_select :vote_start %>
        </li>
        <li class="string input required stringish" id="grant_meeting_one">
          <label class="label" for="grant_meeting_one">First Meeting<abbr title="required">*</abbr></label>
          <%= f.date_select :meeting_one %>
        </li>
        <li class="string input required stringish" id="grant_meeting_two">
          <label class="label" for="grant_meeting_two">Second Meeting<abbr title="required">*</abbr></label>
          <%= f.date_select :meeting_two %>
        </li>
        <li class="string input required stringish" id="grant_vote_end">
          <label class="label" for="grant_vote_end">Voting End Date<abbr title="required">*</abbr></label>
          <%= f.date_select :vote_end %>
        </li>
        <%= f.input :hidden, :label => "Hidden from voter signup page"%>

        <br /><br />
        <%= submit_tag("Create Grant", class: "button")%></fieldset>
    <% end %>
    <br />
    <%= link_to 'Back', :controller => "admins", :action => "grants" %>
  <% else %>
    You must be logged in as an admin to create grants.
    <br />
    <%= link_to 'Back', :back %>
  <% end %>

  <script>
      function numericFilter(txb) {
          txb.value = txb.value.replace(/[^\0-9]/ig, "");
          if(txb.value > 10000) {
              txb.value = 10000;
          }
      }

  function validate() {
    errors = 0;

    //round decimals in funding amounts -- whole dollars only
    var max_funding_dollars = document.getElementById('grant_max_funding_dollars').value;
    var max_funding_dollars_num = parseInt(max_funding_dollars).toFixed(0);
    document.getElementById('grant_max_funding_dollars').value = max_funding_dollars_num.toString();

    judge.validate(document.getElementById('grant_name'), {
      valid: function(element) {
        element.style.border = '1px solid green';
      },
      invalid: function(element, messages) {
        element.style.border = '1px solid red';
        alert('name error: ' + messages.join(','));
        errors++;
      }
    });

    judge.validate(document.getElementById('grant_max_funding_dollars'), {
      valid: function(element) {
        element.style.border = '1px solid green';
      },
      invalid: function(element, messages) {
        element.style.border = '1px solid red';
        alert('requested funding error: ' + messages.join(','));
        errors++;
      }
    });

    submit_start_date = date_from_selector("grant_submit_start");
    submit_end_date = date_from_selector("grant_submit_end");
    if (submit_start_date > submit_end_date) {
      errors++;
      alert('error: grant start date must be before or on grant end date');
      document.getElementById("grant_submit_start").style.border = '1px solid red';
      document.getElementById("grant_submit_end").style.border = '1px solid red';
    }

    vote_start_date = date_from_selector("grant_vote_start");
    vote_end_date = date_from_selector("grant_vote_end");
    if (vote_start_date > vote_end_date) {
      errors++;
      alert('error: vote start date must be before or on vote end date');
      document.getElementById("grant_vote_start").style.border = '1px solid red';
      document.getElementById("grant_vote_end").style.border = '1px solid red';
    }

    meeting_one_date = date_from_selector("grant_meeting_one");
    if (meeting_one_date > vote_end_date) {
      errors++;
      alert('error: meeting dates must be before or on vote end date');
      document.getElementById("grant_meeting_one").style.border = '1px solid red';
    }

    meeting_two_date = date_from_selector("grant_meeting_two");
    if (meeting_two_date > vote_end_date) {
      errors++;
      alert('error: meeting dates must be before or on vote end date');
      document.getElementById("grant_meeting_two").style.border = '1px solid red';
    }

    if (meeting_one_date > meeting_two_date) {
      errors++;
      alert('error: first meeting must be before second meeting');
      document.getElementById("grant_meeting_one").style.border = '1px solid red';
    }

    return errors===0;
  }

  function date_from_selector(prefix) {
    year = document.getElementById(prefix + "_1i").value;
    month = document.getElementById(prefix + "_2i").value;
    day = document.getElementById(prefix + "_3i").value;
    return new Date(year, month, day, 0, 0, 0, 0);
  }

  </script>
</div>
